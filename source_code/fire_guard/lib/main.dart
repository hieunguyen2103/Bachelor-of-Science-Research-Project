import 'package:fire_guard/controll/authGateControll.dart';
import 'package:fire_guard/screens/authScreen.dart';
import 'package:fire_guard/screens/mainScreen.dart';
import 'package:fire_guard/screens/splashScreen.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'firebase_options.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();
bool isDialogShowing = false;

void main() async{
  WidgetsFlutterBinding.ensureInitialized();  // ƒë·∫£m b·∫£o binding Flutter ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi ch·∫°y c√°c h√†m async.

  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  await Firebase.initializeApp(  // H√†m n√†y ƒë·ªÉ kh·ªüi t·∫°o Firebase trong ·ª©ng d·ª•ng tr∆∞·ªõc khi s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa Firebase
    options: DefaultFirebaseOptions.currentPlatform,  // l·∫•y c·∫•u h√¨nh Firebase t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng n·ªÅn t·∫£ng, ƒë√£ t·∫°o s·∫µn b·∫±ng tool flutterfire configure.
  );

  // L·∫Øng nghe th√¥ng b√°o khi app t·∫Øt
  // FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // L·∫Øng nghe th√¥ng b√°o khi app ƒëang ch·∫°y (foreground)
  FirebaseMessaging.onMessage.listen(_handleForegroundMessage);
  
  runApp(const App());
}

Future<void> _handleForegroundMessage(RemoteMessage message) async {
  print("üîî [FG] Nh·∫≠n th√¥ng b√°o: ${message.notification?.title}");

  final prefs = await SharedPreferences.getInstance();
  final title = message.notification?.title ?? 'Th√¥ng b√°o';
  final body = message.notification?.body ?? '';
  final timestamp = DateTime.now().toIso8601String();

  // üìù L∆∞u th√¥ng b√°o v√†o local
  final alert = {
    'type': title,
    'location': body,
    'timestamp': timestamp,
  };

  final oldList = prefs.getStringList('alert_history') ?? [];
  final newList = [jsonEncode(alert), ...oldList].take(10).toList();
  await prefs.setStringList('alert_history', newList);

  // ‚ùóƒê√≥ng popup c≈© n·∫øu c√≥
  final navigator = navigatorKey.currentState;
  if (navigator == null) return;

  if (isDialogShowing && navigator.canPop()) {
    navigator.pop();
    isDialogShowing = false;
    await Future.delayed(const Duration(milliseconds: 100));
  }

  isDialogShowing = true;

  showDialog(
    context: navigator.context,
    builder: (_) => AlertDialog(
      title: Text(title),
      content: Text(body),
      actions: [
        TextButton(
          onPressed: () {
            isDialogShowing = false;
            navigator.pop();
          },
          child: const Text("ƒê√≥ng"),
        )
      ],
    ),
  );
}

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print('[BG]Th√¥ng b√°o khi app t·∫Øt: ${message.messageId}');

  final prefs = await SharedPreferences.getInstance();
  final title = message.notification?.title ?? 'Th√¥ng b√°o';
  final body = message.notification?.body ?? '';
  final timestamp = DateTime.now().toIso8601String();

  final alert = {
    'type': title,
    'location': body,
    'timestamp': timestamp,
  };

  final oldList = prefs.getStringList('alert_history') ?? [];
  final newList = [jsonEncode(alert), ...oldList].take(10).toList();
  await prefs.setStringList('alert_history', newList);
}



class App extends StatelessWidget {
  const App({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      navigatorKey: navigatorKey,
      title: 'FireGuard',
      theme: ThemeData().copyWith(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(
            seedColor: const Color.fromARGB(255, 63, 17, 177)),
      ),
      home: const AuthGateControll(),
    );
  }
}